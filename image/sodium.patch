From d395943fcb639684037bbc8cb7a6fc30a1ae2223 Mon Sep 17 00:00:00 2001
From: Thomas Heck <t@b128.net>
Date: Sun, 8 Apr 2018 16:38:52 +0200
Subject: [PATCH] use libsodium

---
 client/cjdroute2.c    |  6 ++++++
 crypto/CryptoAuth.c   | 11 ++++++++--
 crypto/Sign.c         |  3 +--
 node_build/builder.js | 33 -----------------------------
 node_build/make.js    | 49 ++++---------------------------------------
 5 files changed, 20 insertions(+), 82 deletions(-)

diff --git a/client/cjdroute2.c b/client/cjdroute2.c
index c960c6ed..73be0e04 100644
--- a/client/cjdroute2.c
+++ b/client/cjdroute2.c
@@ -57,6 +57,7 @@
 #include <stdint.h>
 #include <stdio.h>
 #include <unistd.h>
+#include <sodium.h>
 
 #define DEFAULT_TUN_DEV "tun0"
 
@@ -523,6 +524,11 @@ int main(int argc, char** argv)
         fprintf(stderr, "Log_LEVEL = KEYS, EXPECT TO SEE PRIVATE KEYS IN YOUR LOGS!\n");
     #endif
 
+    if (sodium_init() == -1) {
+        fprintf(stderr, "error in sodium_init\n");
+        return 1;
+    }
+
     if (argc > 1 && (!CString_strcmp("angel", argv[1]) || !CString_strcmp("core", argv[1]))) {
         return Core_main(argc, argv);
     }
diff --git a/crypto/CryptoAuth.c b/crypto/CryptoAuth.c
index 10c44ea0..aa52dd22 100644
--- a/crypto/CryptoAuth.c
+++ b/crypto/CryptoAuth.c
@@ -86,7 +86,11 @@ static inline void getSharedSecret(uint8_t outputSecret[32],
                                    struct Log* logger)
 {
     if (passwordHash == NULL) {
-        crypto_box_curve25519xsalsa20poly1305_beforenm(outputSecret, herPublicKey, myPrivateKey);
+        if (crypto_box_curve25519xsalsa20poly1305_beforenm(outputSecret, herPublicKey, myPrivateKey)
+        != 0) {
+          Log_error(logger, "error in crypto_box_curve25519xsalsa20poly1305_beforenm\n");
+          return;
+        }
     } else {
         union {
             struct {
@@ -96,7 +100,10 @@ static inline void getSharedSecret(uint8_t outputSecret[32],
             uint8_t bytes[64];
         } buff;
 
-        crypto_scalarmult_curve25519(buff.components.key, myPrivateKey, herPublicKey);
+        if (crypto_scalarmult_curve25519(buff.components.key, myPrivateKey, herPublicKey) != 0) {
+          Log_error(logger, "error in crypto_scalarmult_curve25519\n");
+          return;
+        }
         Bits_memcpy(buff.components.passwd, passwordHash, 32);
         crypto_hash_sha256(outputSecret, buff.bytes, 64);
     }
diff --git a/crypto/Sign.c b/crypto/Sign.c
index 973630e3..fb80907e 100644
--- a/crypto/Sign.c
+++ b/crypto/Sign.c
@@ -15,8 +15,7 @@
 
 #include "crypto/Sign.h"
 
-#include "node_build/dependencies/cnacl/crypto_sign/ed25519/ref10/ge.h"
-#include "node_build/dependencies/cnacl/crypto_sign/ed25519/ref10/sc.h"
+#include <sodium/private/curve25519_ref10.h>
 #include "crypto_hash_sha512.h"
 #include "crypto_sign_ed25519.h"
 
diff --git a/node_build/builder.js b/node_build/builder.js
index 79d5d2f7..296ef54c 100644
--- a/node_build/builder.js
+++ b/node_build/builder.js
@@ -1057,39 +1057,6 @@ var configure = module.exports.configure = function (params, configFunc) {
                 }
             }));
         });
-
-    }).nThen(function (waitFor) {
-
-        if (builder.linters.length === 0) {
-            return;
-        }
-
-        debug("Checking codestyle");
-
-        var sema = Semaphore.create(64);
-
-        builder.rebuiltFiles.forEach(function (fileName) {
-            sema.take(waitFor(function (returnAfter) {
-                Fs.readFile(fileName, waitFor(function (err, ret) {
-                    if (err) { throw err; }
-
-                    ret = ret.toString('utf8');
-                    nThen(function (waitFor) {
-
-                        builder.linters.forEach(function (linter) {
-                            linter(fileName, ret, waitFor(function (out, isErr) {
-                                if (isErr) {
-                                    debug("\033[1;31m" + out + "\033[0m");
-                                    builder.failure = true;
-                                }
-                            }));
-                        });
-
-                    }).nThen(returnAfter(waitFor()));
-                }));
-            }));
-        });
-
     }).nThen(function (waitFor) {
 
         stage(testStage, builder, waitFor);
diff --git a/node_build/make.js b/node_build/make.js
index 3d301f45..fe54a5bc 100644
--- a/node_build/make.js
+++ b/node_build/make.js
@@ -254,50 +254,9 @@ Builder.configure({
         }));
 
     }).nThen(function (waitFor) {
-
-        builder.config.libs.push(dependencyDir + '/cnacl/jsbuild/libnacl.a');
-        builder.config.includeDirs.push(dependencyDir + '/cnacl/jsbuild/include/');
-
-        // needed for Sign.c which pulls in crypto_int32.h
-        builder.config.includeDirs.push(dependencyDir + '/cnacl/jsbuild/include_internal/');
-
-        Fs.exists(dependencyDir + '/cnacl/jsbuild/libnacl.a', waitFor(function (exists) {
-            if (exists) { return; }
-
-            console.log("Build NaCl");
-            var cwd = process.cwd();
-            process.chdir(dependencyDir + '/cnacl/');
-
-            var NaCl = require(process.cwd() + '/node_build/make.js');
-            NaCl.build(function (args, callback) {
-                if (builder.config.systemName !== 'win32') {
-                    args.unshift('-fPIC');
-                }
-
-                args.unshift(builder.config.optimizeLevel, '-fomit-frame-pointer');
-
-                if (!/^\-O0$/.test(builder.config.optimizeLevel)) {
-                    args.unshift('-D_FORTIFY_SOURCE=2');
-                }
-
-                if (CFLAGS) {
-                    [].push.apply(args, CFLAGS.split(' '));
-                }
-
-                if (!builder.config.crossCompiling) {
-                    if (NO_MARCH_FLAG.indexOf(process.arch) == -1) {
-                        args.unshift('-march=native');
-                    }
-                }
-
-                builder.cc(args, callback);
-            },
-            builder.config,
-            waitFor(function () {
-                process.chdir(cwd);
-            }));
-        }));
-
+        builder.config.libs.push('/build/libsodium/src/libsodium/.libs/libsodium.a');
+        builder.config.includeDirs.push('/build/libsodium/src/libsodium/include/');
+        builder.config.includeDirs.push('/build/libsodium/src/libsodium/include/sodium/');
     }).nThen(function (waitFor) {
 
         builder.config.libs.push(libuvLib);
@@ -441,7 +400,7 @@ Builder.configure({
     builder.buildExecutable('crypto/random/randombytes.c');
 
     builder.lintFiles(function (fileName, file, callback) {
-        if (/dependencies/.test(fileName)) {
+        if (/(dependencies|\/tmp\/libsodium)/.test(fileName)) {
             callback('', false);
             return;
         }
-- 
2.17.0

